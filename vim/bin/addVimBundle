#!/usr/bin/env python

import argparse
import os
import re
import subprocess
import sys

parser = argparse.ArgumentParser(
    description='Script to add (a) Pathogen bundle(s) to my Vim config'
)
parser.add_argument('--push', action='store_true',
                    help='push commit to dotfiles repo if flag is present')
parser.add_argument('githubURLs', nargs='+',
                    help='either Github repo URL(s) or clone URL(s) for Github repo')

args = parser.parse_args()
urls = args.githubURLs
push = args.push

# change into working directory
print 'Changing to ~/dotfiles...'
try:
    os.chdir(os.path.expanduser('~/dotfiles'))
except OSError:
    print 'Could not find ~/dotfiles'
    sys.exit(1)

# stash current changes
print 'Stashing changes...'
subprocess.call([
    'git',
    'stash',
    '--quiet'
])

# checkout master branch
print 'Checking out master branch...'
subprocess.call([
    'git',
    'checkout',
    '--quiet',
    'master'
])

bundleNames = []

for url in urls:

    print '-'*30
    print 'ADDING {}'.format(url)

    # parse Github URL
    print 'Parsing Github URL...'
    match = re.match(r'.*[\/:](.+?)\/([^\.\/]+)(?:\.git)?', url)
    if not match:
        print 'Could not parse github URL'
        sys.exit(1)

    githubName = match.group(1)
    bundleName = match.group(2)
    bundleNames.append(bundleName)

    newURL = 'git@github.com:{}/{}.git'.format(githubName, bundleName)
    print 'Using {} for Github repo URL'.format(newURL)

    # add the submodule
    print 'Adding new submodule {}...'.format(bundleName)
    subprocess.call([
        'git',
        'submodule',
        '--quiet',
        'add',
        '--force',
        newURL,
        'vim/bundle/{}'.format(bundleName)
    ])

# commit changes to .gitmodules and new submodule
print 'Committing changes to .gitmodules and new submodule(s)...'
subprocess.call([
    'git',
    'commit',
    '--quiet',
    '-m',
    'added submodules: {}'.format(', '.join(bundleNames))
])

# pushing changes based on flag
if push:
    print '--push detected, so pushing changes to remote dotfiles repo...'
    subprocess.call([
        'git',
        'push',
        'origin',
        'master'
    ])

# unstash original changes
print 'Reapplying original changes...'
subprocess.call([
    'git',
    'stash',
    'pop',
    '--quiet'
])
