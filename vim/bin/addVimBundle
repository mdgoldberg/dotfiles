#!/usr/bin/env python

import argparse
import os
import re
import subprocess
import sys

parser = argparse.ArgumentParser(description='Script to add a Pathogen bundle to my Vim config')
parser.add_argument('--push', action='store_true',
                    help='push commit to dotfiles repo if flag is present')
parser.add_argument('githubURL',
                    help='either Github repo URL or clone URL for Github repo')

args = parser.parse_args()
url = args.githubURL
push = args.push

# parse Github URL
print 'Parsing Github URL...'
match = re.match(r'.*[\/:](.*?)\/([^\.]*)(?:\.git)?', url)
if not match:
    print 'Could not parse github URL'
    sys.exit(1)

githubName = match.group(1)
bundleName = match.group(2)

newURL = 'git@github.com:{}/{}.git'.format(githubName, bundleName)
print 'Using {} for Github repo URL'.format(newURL)

# change into working directory
print 'Changing to ~/dotfiles...'
try:
    os.chdir(os.path.expanduser('~/dotfiles'))
except OSError:
    print 'Could not find ~/dotfiles'
    sys.exit(1)

# stash current changes
print 'Stashing changes...'
subprocess.call([
    'git',
    'stash',
    '--quiet'
    ])

# add the submodule
print 'Adding new submodule {}...'.format(bundleName)
subprocess.call([
    'git',
    'submodule',
    '--quiet',
    'add',
    '--force',
    newURL,
    'vim/bundle/{}'.format(bundleName)
    ])

# commit changes to .gitmodules and new submodule
print 'Committing changes to .gitmodules and new submodule'
subprocess.call([
    'git',
    'commit',
    '--quiet',
    '-m',
    'added submodule: {}'.format(bundleName)
    ])

# pushing changes based on flag
if push:
    print 'Pushing changes to remote dotfiles repo...'
    subprocess.call([
        'git',
        'push',
        'origin',
        'master'
        ])

# unstash original changes
print 'Reapplying original changes...'
subprocess.call([
    'git',
    'stash',
    'pop',
    '--quiet'
    ])
