#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

parser = argparse.ArgumentParser(
    description='Script to remove a Pathogen bundle from my Vim config'
)
parser.add_argument('bundleNames', nargs='+',
                    help='the name(s) of the Pathogen bundle to remove')
parser.add_argument('--push', action='store_true',
                    help='push commit to dotfiles repo if flag is present')

args = parser.parse_args()
bundleNames = args.bundleNames
push = args.push

# change into working directory
print 'Changing to ~/dotfiles...'
try:
    os.chdir(os.path.expanduser('~/dotfiles'))
except OSError:
    print 'Could not find ~/dotfiles'
    sys.exit(1)

# first stash current changes
print 'Stashing changes...'
subprocess.call([
    'git',
    'stash',
    '--quiet'
    ])

for bundleName in bundleNames:

    print
    print 'REMOVING {}'.format(bundleName)
    print

    bundleDir = 'vim/bundle/{}'.format(bundleName)

    # fix .gitmodules
    print 'Removing lines from .gitmodules...'
    with open('.gitmodules', 'r') as gitmodules:
        lines = gitmodules.readlines()
        keep_lines = []
        del_lines = []
        for line in lines:
            if bundleName in line:
                del_lines.append(line)
            else:
                keep_lines.append(line)

    if del_lines:
        print 'Deleting following lines from .gitmodules:'
        for line in del_lines: print '\t{}'.format(line.strip())
        else:
            print 'No lines deleted from .gitmodules.'

    with open('.gitmodules', 'w') as gitmodules:
        gitmodules.writelines(keep_lines)

    # now fix .git/config
    print 'Removing lines from .git/config...'
    with open('.git/config', 'r') as gitconfig:
        lines = gitconfig.readlines()
        keep_lines = []
        del_lines = []
        for line in lines:
            if bundleName in line:
                del_lines.append(line)
            else:
                keep_lines.append(line)

    if del_lines:
        print 'Deleting following lines from .git/config:'
        for line in del_lines: print '\t{}'.format(line.strip())
        else:
            print 'No lines deleted from .git/config.'

    with open('.git/config', 'w') as gitconfig:
        gitconfig.writelines(keep_lines)

    # commit .gitmodules change
    print 'Committing changes to .gitmodules...'
    subprocess.call([
        'git',
        'commit',
        '--quiet',
        '-am',
        'removed submodule: {}'.format(bundleName)
    ])

    # remove submodule files from git
    print 'Removing submodule files from git...'
    subprocess.call([
        'git',
        'rm',
        '--quiet',
        '--cached',
        bundleDir
    ])

    # remove the actual files
    print 'Removing actual files with rm...'
    subprocess.call([
        'rm',
        '-rf',
        bundleDir
    ])

    # remove associated .git/modules/vim/bundle/BUNDLE folder
    print ('Removing associated folder in'
           ' .git/modules/vim/bundle/{} folder...'.format(bundleName))
    subprocess.call([
        'rm',
        '-rf',
        '.git/modules/vim/bundle/{}'.format(bundleName)
    ])

    # amend earlier commit with these changes
    print 'Amending these changes to earlier commit...'
    subprocess.call([
        'git',
        'commit',
        '--quiet',
        '--amend',
        '--no-edit'
    ])

# pushing changes based on flag
if push:
    print 'Pushing changes to remote dotfiles repo...'
    subprocess.call([
        'git',
        'push',
        'origin',
        'master'
    ])

# unstash original changes
print 'Unstashing original changes...'
subprocess.call([
    'git',
    'stash',
    'pop',
    '--quiet'
])
