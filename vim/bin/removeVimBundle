#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

parser = argparse.ArgumentParser(description='Script to remove a Pathogen bundle from my Vim config')
parser.add_argument('bundleName', help='the name of the Pathogen bundle to remove')

args = parser.parse_args()
bundleName = args.bundleName

# change into working directory
os.chdir(os.path.expanduser('~/dotfiles'))

# first stash current changes
subprocess.call([
    'git',
    'stash'
    ])

# now fix .gitmodules

print 'Removing lines from .gitmodules...'

with open('.gitmodules', 'r') as gitmodules:
    lines = gitmodules.readlines()
    keep_lines = []
    del_lines = []
    for line in lines:
        if bundleName in line:
            del_lines.append(line)
        else:
            keep_lines.append(line)

print '---'
if del_lines:
    print 'Deleting following lines from .gitmodules:'
    for line in del_lines: print line.strip()
else:
    print 'No lines deleted from .gitmodules.'
print '---'

with open('.gitmodules', 'w') as gitmodules:
    gitmodules.writelines(keep_lines)

print '.gitmodules complete!'

# now fix .git/config

print 'Removing lines from .git/config...'

with open('.git/config', 'r') as gitconfig:
    lines = gitconfig.readlines()
    keep_lines = []
    del_lines = []
    for line in lines:
        if bundleName in line:
            del_lines.append(line)
        else:
            keep_lines.append(line)

print '---'
if del_lines:
    print 'Deleting following lines from .git/config:'
    for line in del_lines: print line.strip()
else:
    print 'No lines deleted from .git/config.'
print '---'

with open('.git/config', 'w') as gitconfig:
    gitconfig.writelines(keep_lines)

print '.git/config complete!'

# commit .gitmodules change
subprocess.call([
    'git',
    'commit',
    '-am',
    'removed submodule: {}'.format(bundleName)
    ])

# remove submodule files from git
subprocess.call([
    'git',
    'rm',
    '--cached',
    'vim/bundle/{}'.format(bundleName)
    ])

# remove the actual files
subprocess.call([
    'rm',
    '-rf',
    'vim/bundle/{}'.format(bundleName)
    ])

# amend earlier commit with these changes
subprocess.call([
    'git',
    'commit',
    '--amend',
    '--no-edit'
    ])

# unstash original changes
subprocess.call([
    'git',
    'stash',
    'pop'
    ])
