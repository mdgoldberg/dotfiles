set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-sensible'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
Plugin 'majutsushi/tagbar'
Plugin 'sirver/ultisnips'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-latex/vim-latex'
Plugin 'lambacck/vim-matchit'
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'Vim-R-plugin2'
Plugin 'derekwyatt/vim-scala'
Plugin 'honza/vim-snippets'
Plugin 'christoomey/vim-tmux-navigator'

call vundle#end()
filetype plugin indent on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ


" Use jk or kj to leave insert mode and return to normal mode
imap jk <ESC>
imap kj <ESC>
imap JK <ESC>
imap KJ <ESC>
imap Jk <ESC>
imap jK <ESC>
imap Kj <ESC>
imap kJ <ESC>

set ignorecase
set number
set autoread

" enable the mouse
set mouse=a

" set colorscheme
colorscheme slate
set background=dark
syntax on

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Supertab configs
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
let g:SuperTabContextDiscoverDiscovery =
            \ ["&completefunc:<c-p>", "&omnifunc:<c-x><c-o>"]

" Vim-Latex stuff
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_ViewRule_pdf = 'open -a /Applications/Skim.app'
let g:Tex_CompileRule_pdf='latexmk -pdf -interaction=nonstopmode "$*"'

" Dispatch mappings
nnoremap <leader>dp :w<CR>:silent execute "Dispatch"<CR>
nnoremap <leader>dd :w<CR>:silent execute "Dispatch!"<CR>
" Defaults
autocmd filetype rnoweb let b:dispatch = 'R CMD Sweave "%" && latexmk -pdf "%:r.tex" && latexmk -c'
autocmd filetype python let b:dispatch = 'python "%"'
autocmd filetype r let b:dispatch = 'r -q "%"'
autocmd filetype tex let b:dispatch = 'latexmk -pdf -interaction=nonstopmode "%" && latexmk -c'
autocmd filetype text let b:dispatch = 'pandoc "%" -r markdown+raw_tex+latex_macros -o "%:r.pdf" -V geometry:margin=0.5in'
" Special for viewing PDFs
autocmd filetype tex,rnoweb,text nnoremap <leader>dv :w<CR>:silent execute "Dispatch! open '%:r.pdf'"<CR>

" Quickfix/Preview mappings
nnoremap <leader>qo :copen<CR>
nnoremap <leader>qc :cclose<CR>
nnoremap <leader>qq :cclose<CR>:pclose<CR>

" unmap random Vim-R-plugin mappings
autocmd filetype tex,rnoweb let g:vimrplugin_insert_mode_cmds = 0

" Jedi overrides
let g:jedi#popup_on_dot = 0

" wrap and linebreak
set wrap
set linebreak

" default tab settings: 4-space tabs, tabs as spaces
set shiftwidth=4
set tabstop=4
set expandtab

" make movements visual lines instead of actual lines
nnoremap j gj
nnoremap k gk
nnoremap 0 g0
nnoremap ^ g^
nnoremap $ g$
vnoremap 0 g0
vnoremap ^ g^
vnoremap $ g$

" Tagbar mapping
noremap <leader>tb :TagbarToggle<CR>
