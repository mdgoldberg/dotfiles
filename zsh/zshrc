# set editor to nvim when present, else vim
command -v nvim > /dev/null && export EDITOR=nvim || export EDITOR=vim

# enable shift+tab for going back in auto complete menu
bindkey "^[[Z" reverse-menu-complete
#
# use emacs key-bindings in shell
bindkey -e

# disable vim's r command so it doesn't interfere with R lang
disable r

# allow comments on command line
setopt interactivecomments

# share history across sessions
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE
setopt inc_append_history
setopt share_history

# easier cd'ing (can just use path/var)
setopt autocd
setopt cdablevars

# set word style so delimiters like `.` and `/` are recognized
autoload -U select-word-style
select-word-style bash

# configuring some environment variables
export DOTFILES_DIR=$HOME/dotfiles
export DATA_DIR=$DOTFILES_DIR/data
export BIN_DIR=$DOTFILES_DIR/bin

# configuring PATH
export PATH=$BIN_DIR:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/opt/X11/bin:/Library/TeX/texbin:$HOME/.ssi/bin

export MANPATH="/usr/local/man:$MANPATH"

# platform-specific configs
PLATFORM_ZSH_CONFIG="$DOTFILES_DIR/zsh/`uname`.zsh"
[[ -f $PLATFORM_ZSH_CONFIG ]] && source $PLATFORM_ZSH_CONFIG
unset PLATFORM_ZSH_CONFIG

# pyenv startup and config
export PYENV_ROOT=$HOME/.pyenv
PYENV_INIT_SCRIPT=$DATA_DIR/cache/_pyenv_init_script
[[ ! -f $PYENV_INIT_SCRIPT ]] && pyenv init - > $PYENV_INIT_SCRIPT
source $PYENV_INIT_SCRIPT
unset PYENV_INIT_SCRIPT

# fzf config
[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND="rg --hidden -g '!.git' -l ''"  # to find hidden files

# prevent Python from generating bytecode
export PYTHONDONTWRITEBYTECODE=1

# prevent Python from buffering stdout/stderr
export PYTHONUNBUFFERED=1

# nvm config
export NVM_DIR="$HOME/.nvm"
source $DOTFILES_DIR/zsh/lazy_load_node.zsh

# you-should-use config
export YSU_MESSAGE_POSITION="after"
export YSU_MODE=ALL

# zsh autosuggestions config
export ZSH_AUTOSUGGEST_USE_ASYNC=true

# pipenv config
export PIPENV_VENV_IN_PROJECT=true

# spaceship prompt config
export SPACESHIP_PROMPT_ADD_NEWLINE=false
export SPACESHIP_PROMPT_DEFAULT_PREFIX="• "
export SPACESHIP_DIR_TRUNC_REPO=false
export SPACESHIP_DIR_PREFIX=$SPACESHIP_PROMPT_DEFAULT_PREFIX
export SPACESHIP_GIT_PREFIX=$SPACESHIP_PROMPT_DEFAULT_PREFIX
export SPACESHIP_GIT_STATUS_UNTRACKED=""
export SPACESHIP_GIT_STATUS_STASHED=""
export SPACESHIP_TIME_SHOW=true
export SPACESHIP_JOBS_AMOUNT_PREFIX=" "
export SPACESHIP_JOBS_AMOUNT_THRESHOLD=0
export SPACESHIP_VENV_SYMBOL="🐍 "
export SPACESHIP_BATTERY_SHOW="always"
export SPACESHIP_PROMPT_ORDER=(
  time          # Time stamps section
  user          # Username section
  dir           # Current directory section
  host          # Hostname section
  git           # Git section (git_branch + git_status)
  exec_time     # Execution time
  jobs          # Background jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
)
export SPACESHIP_RPROMPT_ORDER=(
  venv          # virtualenv section
  pyenv         # Pyenv section
  aws           # Amazon Web Services section
  terraform     # Terraform workspace section
  battery       # Battery level and status
)

# pipenv auto-completion
PIPENV_COMPLETION_SCRIPT=$DATA_DIR/cache/_pipenv_completion_script
[[ ! -f $PIPENV_COMPLETION_SCRIPT ]] && pipenv --completion > $PIPENV_COMPLETION_SCRIPT
source $PIPENV_COMPLETION_SCRIPT
unset PIPENV_COMPLETION_SCRIPT

# holds passwords and API tokens that shouldn't be in source control
touch $DOTFILES_DIR/.secrets
source $DOTFILES_DIR/.secrets

# source my aliases
source $DOTFILES_DIR/zsh/aliases.zsh

# load antibody plugins
ZSH_PLUGINS_FILE=$DOTFILES_DIR/zsh/zsh_plugins.txt
BUNDLED_ZSH_PLUGINS_FILE=$DATA_DIR/cache/bundled_zsh_plugins.zsh
if [[ ! -f $BUNDLED_ZSH_PLUGINS_FILE || $ZSH_PLUGINS_FILE -nt $BUNDLED_ZSH_PLUGINS_FILE ]]; then
    echo "Regenerating $BUNDLED_ZSH_PLUGINS_FILE..."
    antibody bundle < $ZSH_PLUGINS_FILE > $BUNDLED_ZSH_PLUGINS_FILE
fi
source $BUNDLED_ZSH_PLUGINS_FILE
unset ZSH_PLUGINS_FILE BUNDLED_ZSH_PLUGINS_FILE
