#! /usr/bin/env python

from __future__ import print_function
from builtins import str
import os
import shutil
import subprocess

HOME_DIR = os.getenv('HOME')
DOTFILES_DIR = os.path.dirname(os.path.realpath(__file__))


def from_home(s):
    return '{}/{}'.format(HOME_DIR, s)


def from_dotfiles(s):
    return '{}/{}'.format(DOTFILES_DIR, s)


# 1. INSTALL OH-MY-ZSH

subprocess.call(
    ['curl', '-fsSLo', 'oh-my-zsh-install.sh',
     'https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh']
)
subprocess.call(
    ['sh', 'oh-my-zsh-install.sh']
)
os.remove('oh-my-zsh-install.sh')

# 2. INSTALL BREW AND PIP PACKAGES
# TODO: make this optional using one of click, invoke, fabric, etc.

subprocess.call('cat brew_packages.txt | xargs brew install', shell=True)
subprocess.call('pip install -r pip_packages.txt', shell=True)

# 3. INSTALL VIM-PLUG AND PLUGINS

subprocess.call(
    ['curl', '-fLo', '{}/.vim/autoload/plug.vim'.format(HOME_DIR),
     '--create-dirs',
     'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim']
)
subprocess.call(
    ['vim', '+PlugInstall', '+qall']
)

# 4. CREATE SYMLINKS


def create_symlink(src, dst):
    try:
        print(src, '->', dst)
        # remove old file/dir if it exists
        if os.path.isfile(dst) or os.path.islink(dst):
            os.remove(dst)
        elif os.path.isdir(dst):
            shutil.rmtree(dst)
        # make sure necessary directories exist
        base_dir = os.path.dirname(dst)
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
        # make a symlink
        os.symlink(src, dst)
        print('Symlink complete!')
    except OSError as e:
        print(str(e))


SRC_DST_MAP = {
    'zshrc': [from_home('.zshrc')],
    'slate': [from_home('.slate')],
    'vim': [from_home('.vim'), from_home('.config/nvim')],
    'vim/vimrc': [from_home('.vimrc'), from_home('.config/nvim/init.vim')],
    'tmux.conf': [from_home('.tmux.conf')],
    'gitconfig': [from_home('.gitconfig')],
    'pypirc': [from_home('.pypirc')],
    'git_template': [from_home('.git_template')],
    'gitignore_global': [from_home('.gitignore_global')]
}

for src, dsts in SRC_DST_MAP.items():
    for dst in dsts:
        create_symlink(from_dotfiles(src), dst)
